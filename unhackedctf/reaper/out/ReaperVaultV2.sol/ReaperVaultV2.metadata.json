{
  "compiler": {
    "version": "0.8.11+commit.d7f03943"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_asset",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_symbol",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "_tvlCap",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "_strategists",
            "type": "address[]"
          },
          {
            "internalType": "address[]",
            "name": "_multisigRoles",
            "type": "address[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "Deposit",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bool",
            "name": "active",
            "type": "bool"
          }
        ],
        "name": "EmergencyShutdown",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "InCaseTokensGetStuckCalled",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "degradation",
            "type": "uint256"
          }
        ],
        "name": "LockedProfitDegradationUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "previousAdminRole",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "newAdminRole",
            "type": "bytes32"
          }
        ],
        "name": "RoleAdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleGranted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "allocBPS",
            "type": "uint256"
          }
        ],
        "name": "StrategyAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "allocBPS",
            "type": "uint256"
          }
        ],
        "name": "StrategyAllocBPSUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "int256",
            "name": "roi",
            "type": "int256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "repayment",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "gains",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "losses",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "allocated",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "allocBPS",
            "type": "uint256"
          }
        ],
        "name": "StrategyReported",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          }
        ],
        "name": "StrategyRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newTvlCap",
            "type": "uint256"
          }
        ],
        "name": "TvlCapUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address[]",
            "name": "withdrawalQueue",
            "type": "address[]"
          }
        ],
        "name": "UpdateWithdrawalQueue",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "Withdraw",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "withdrawMaxLoss",
            "type": "uint256"
          }
        ],
        "name": "WithdrawMaxLossUpdated",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "ADMIN",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DEFAULT_ADMIN_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DEGRADATION_COEFFICIENT",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "GUARDIAN",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "PERCENT_DIVISOR",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "STRATEGIST",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "allocBPS",
            "type": "uint256"
          }
        ],
        "name": "addStrategy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "asset",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "availableCapital",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "constructionTime",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "convertToAssets",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          }
        ],
        "name": "convertToShares",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "internalType": "uint8",
            "name": "",
            "type": "uint8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "subtractedValue",
            "type": "uint256"
          }
        ],
        "name": "decreaseAllowance",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "deposit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "depositAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "emergencyShutdown",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getPricePerFullShare",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleAdmin",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          }
        ],
        "name": "getRoleMember",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleMemberCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "grantRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "hasRole",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "inCaseTokensGetStuck",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "addedValue",
            "type": "uint256"
          }
        ],
        "name": "increaseAllowance",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lastReport",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lockedProfit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lockedProfitDegradation",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "maxDeposit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "maxMint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "maxRedeem",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "maxWithdraw",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "mint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          }
        ],
        "name": "previewDeposit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "previewMint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "previewRedeem",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          }
        ],
        "name": "previewWithdraw",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "redeem",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "redeemAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "removeTvlCap",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "renounceRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "int256",
            "name": "roi",
            "type": "int256"
          },
          {
            "internalType": "uint256",
            "name": "repayment",
            "type": "uint256"
          }
        ],
        "name": "report",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "revokeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          }
        ],
        "name": "revokeStrategy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "active",
            "type": "bool"
          }
        ],
        "name": "setEmergencyShutdown",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "degradation",
            "type": "uint256"
          }
        ],
        "name": "setLockedProfitDegradation",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "_withdrawalQueue",
            "type": "address[]"
          }
        ],
        "name": "setWithdrawalQueue",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "strategies",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "activation",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "allocBPS",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "allocated",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "gains",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "losses",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "lastReport",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalAllocBPS",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalAllocated",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalAssets",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "tvlCap",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "allocBPS",
            "type": "uint256"
          }
        ],
        "name": "updateStrategyAllocBPS",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newTvlCap",
            "type": "uint256"
          }
        ],
        "name": "updateTvlCap",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_withdrawMaxLoss",
            "type": "uint256"
          }
        ],
        "name": "updateWithdrawMaxLoss",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "withdraw",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawMaxLoss",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "withdrawalQueue",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "addStrategy(address,uint256)": {
          "params": {
            "allocBPS": "The strategy allocation in basis points.",
            "strategy": "The strategy to add."
          }
        },
        "allowance(address,address)": {
          "details": "See {IERC20-allowance}."
        },
        "approve(address,uint256)": {
          "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
        },
        "availableCapital()": {
          "returns": {
            "_0": "availableCapital - the amount of capital the vault can provide the strategy."
          }
        },
        "balanceOf(address)": {
          "details": "See {IERC20-balanceOf}."
        },
        "constructor": {
          "params": {
            "_asset": "the asset to maximize.",
            "_name": "the name of the vault asset.",
            "_symbol": "the symbol of the vault asset.",
            "_tvlCap": "initial deposit cap for scaling TVL safely."
          }
        },
        "convertToAssets(uint256)": {
          "params": {
            "shares": "The amount of shares to convert to underlying assets."
          },
          "returns": {
            "_0": "assets - the amount of assets given for the amount of shares."
          }
        },
        "convertToShares(uint256)": {
          "params": {
            "assets": "The amount of underlying assets to convert to shares."
          },
          "returns": {
            "_0": "shares - the amount of shares given for the amount of assets."
          }
        },
        "decimals()": {
          "returns": {
            "_0": "decimals - the amount of decimals used by the vault ERC20."
          }
        },
        "decreaseAllowance(address,uint256)": {
          "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
        },
        "deposit(uint256,address)": {
          "params": {
            "assets": "The amount of assets to deposit",
            "receiver": "The receiver of the minted shares"
          },
          "returns": {
            "shares": "- the amount of shares issued from the deposit."
          }
        },
        "getPricePerFullShare()": {
          "returns": {
            "_0": "pricePerFullShare - a uint256 of how much underlying asset one vault share represents."
          }
        },
        "getRoleAdmin(bytes32)": {
          "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "getRoleMember(bytes32,uint256)": {
          "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
        },
        "getRoleMemberCount(bytes32)": {
          "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
        },
        "grantRole(bytes32,address)": {
          "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
        },
        "hasRole(bytes32,address)": {
          "details": "Returns `true` if `account` has been granted `role`."
        },
        "inCaseTokensGetStuck(address)": {
          "params": {
            "token": "address of the asset to rescue."
          }
        },
        "increaseAllowance(address,uint256)": {
          "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
        },
        "maxDeposit(address)": {
          "params": {
            "receiver": "The depositor, unused in this case but here as part of the ERC4626 spec."
          },
          "returns": {
            "_0": "maxAssets - the maximum depositable assets."
          }
        },
        "maxMint(address)": {
          "params": {
            "receiver": "The minter, unused in this case but here as part of the ERC4626 spec."
          },
          "returns": {
            "_0": "shares - the maximum amount of shares issued from calling mint."
          }
        },
        "maxRedeem(address)": {
          "params": {
            "owner": "The owner of the shares to redeem."
          },
          "returns": {
            "_0": "maxShares - the amount of redeemable shares."
          }
        },
        "maxWithdraw(address)": {
          "params": {
            "owner": "The owner of the shares to withdraw."
          },
          "returns": {
            "_0": "maxAssets - the maximum amount of assets transferred from calling withdraw."
          }
        },
        "mint(uint256,address)": {
          "params": {
            "receiver": "The receiver of the minted shares.",
            "shares": "The amount of shares to mint."
          },
          "returns": {
            "_0": "assets - the amount of assets transferred from the mint."
          }
        },
        "name()": {
          "details": "Returns the name of the token."
        },
        "previewDeposit(uint256)": {
          "params": {
            "assets": "The amount of assets to deposit."
          },
          "returns": {
            "_0": "shares - the amount of shares given for the amount of assets."
          }
        },
        "previewMint(uint256)": {
          "params": {
            "shares": "The amount of shares to mint."
          },
          "returns": {
            "_0": "assets - the amount of assets given for the amount of shares."
          }
        },
        "previewRedeem(uint256)": {
          "params": {
            "shares": "The amount of shares to redeem."
          },
          "returns": {
            "_0": "assets - the amount of assets redeemed from the amount of shares."
          }
        },
        "previewWithdraw(uint256)": {
          "params": {
            "assets": "The amount of assets to withdraw."
          },
          "returns": {
            "_0": "shares - the amount of shares burned for the amount of assets."
          }
        },
        "redeem(uint256,address,address)": {
          "params": {
            "owner": "The owner of the shares to redeem.",
            "receiver": "The receiver of the redeemed assets.",
            "shares": "The amount of shares to redeem."
          },
          "returns": {
            "assets": "- the amount of assets redeemed."
          }
        },
        "renounceRole(bytes32,address)": {
          "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
        },
        "report(int256,uint256)": {
          "params": {
            "repayment": "The repayment of debt by the strategy.",
            "roi": "The return on investment (positive or negative) given as the total amount gained or lost from the harvest."
          },
          "returns": {
            "_0": "debt - the strategy debt to the vault."
          }
        },
        "revokeRole(bytes32,address)": {
          "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
        },
        "revokeStrategy(address)": {
          "params": {
            "strategy": "The strategy to revoke."
          }
        },
        "setEmergencyShutdown(bool)": {
          "params": {
            "active": "If emergencyShutdown is active or not."
          }
        },
        "setLockedProfitDegradation(uint256)": {
          "params": {
            "degradation": "- The rate of degradation in percent per second scaled to 1e18."
          }
        },
        "setWithdrawalQueue(address[])": {
          "params": {
            "_withdrawalQueue": "The new withdrawalQueue to update to."
          }
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        },
        "symbol()": {
          "details": "Returns the symbol of the token, usually a shorter version of the name."
        },
        "totalAssets()": {
          "returns": {
            "_0": "totalManagedAssets - the total amount of assets managed by the vault."
          }
        },
        "totalSupply()": {
          "details": "See {IERC20-totalSupply}."
        },
        "transfer(address,uint256)": {
          "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
        },
        "transferFrom(address,address,uint256)": {
          "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
        },
        "updateStrategyAllocBPS(address,uint256)": {
          "params": {
            "allocBPS": "The strategy allocation in basis points.",
            "strategy": "The strategy to update."
          }
        },
        "updateTvlCap(uint256)": {
          "details": "pass in max value of uint to effectively remove TVL cap.",
          "params": {
            "newTvlCap": "The new tvl cap."
          }
        },
        "updateWithdrawMaxLoss(uint256)": {
          "params": {
            "_withdrawMaxLoss": "The new value, in basis points."
          }
        },
        "withdraw(uint256,address,address)": {
          "params": {
            "assets": "The amount of assets to withdraw.",
            "owner": "The owner of the shares to withdraw.",
            "receiver": "The receiver of the withdrawn assets."
          },
          "returns": {
            "shares": "- the amount of shares burned."
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "STRATEGIST()": {
          "notice": "Reaper Roles in increasing order of privilege. {STRATEGIST} - Role conferred to strategists, allows for tweaking non-critical params. {GUARDIAN} - Multisig requiring 2 signatures for emergency measures such as pausing and panicking. {ADMIN}- Multisig requiring 3 signatures for unpausing and changing TVL cap. The DEFAULT_ADMIN_ROLE (in-built access control role) will be granted to a multisig requiring 4 signatures. This role would have the ability to add strategies, as well as the ability to grant any other roles. Also note that roles are cascading. So any higher privileged role should be able to perform all the functions of any lower privileged role."
        },
        "addStrategy(address,uint256)": {
          "notice": "Adds a new strategy to the vault with a given allocation amount in basis points."
        },
        "availableCapital()": {
          "notice": "Called by a strategy to determine the amount of capital that the vault is able to provide it. A positive amount means that vault has excess capital to provide the strategy, while a negative amount means that the strategy has a balance owing to the vault."
        },
        "constructor": {
          "notice": "Initializes the vault's own 'RF' asset. This asset is minted when someone does a deposit. It is burned in order to withdraw the corresponding portion of the underlying assets."
        },
        "convertToAssets(uint256)": {
          "notice": "The amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met."
        },
        "convertToShares(uint256)": {
          "notice": "The amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met."
        },
        "decimals()": {
          "notice": "Overrides the default 18 decimals for the vault ERC20 to match the same decimals as the underlying asset used."
        },
        "deposit(uint256,address)": {
          "notice": "The entrypoint of funds into the system. People deposit with this function into the vault."
        },
        "depositAll()": {
          "notice": "A helper function to call deposit() with all the sender's funds."
        },
        "getPricePerFullShare()": {
          "notice": "Function for various UIs to display the current value of one of our yield tokens."
        },
        "inCaseTokensGetStuck(address)": {
          "notice": "Rescues random funds stuck that the strat can't handle."
        },
        "maxDeposit(address)": {
          "notice": "Maximum amount of the underlying asset that can be deposited into the Vault for the receiver,  through a deposit call."
        },
        "maxMint(address)": {
          "notice": "Maximum amount of shares that can be minted from the Vault for the receiver, through a mint call."
        },
        "maxRedeem(address)": {
          "notice": "Maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,  through a redeem call."
        },
        "maxWithdraw(address)": {
          "notice": "Maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call."
        },
        "mint(uint256,address)": {
          "notice": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens."
        },
        "previewDeposit(uint256)": {
          "notice": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block,  given current on-chain conditions. "
        },
        "previewMint(uint256)": {
          "notice": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block,  given current on-chain conditions."
        },
        "previewRedeem(uint256)": {
          "notice": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions."
        },
        "previewWithdraw(uint256)": {
          "notice": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions."
        },
        "redeem(uint256,address,address)": {
          "notice": "Burns exactly shares from owner and sends assets of underlying tokens to receiver."
        },
        "redeemAll()": {
          "notice": "A helper function to call redeem() with all the sender's funds."
        },
        "removeTvlCap()": {
          "notice": "Helper function to remove TVL cap."
        },
        "report(int256,uint256)": {
          "notice": "Helper function to report the strategy returns on a harvest."
        },
        "revokeStrategy(address)": {
          "notice": "Removes any allocation to a given strategy."
        },
        "setEmergencyShutdown(bool)": {
          "notice": "Activates or deactivates Vault mode where all Strategies go into full withdrawal. During Emergency Shutdown: 1. No Users may deposit into the Vault (but may withdraw as usual.) 2. New Strategies may not be added. 3. Each Strategy must pay back their debt as quickly as reasonable to minimally affect their position. If true, the Vault goes into Emergency Shutdown. If false, the Vault goes back into Normal Operation."
        },
        "setLockedProfitDegradation(uint256)": {
          "notice": "Changes the locked profit degradation. match the same decimals as the underlying asset used."
        },
        "setWithdrawalQueue(address[])": {
          "notice": "Updates the withdrawalQueue to match the addresses and order specified."
        },
        "totalAssets()": {
          "notice": "It calculates the total underlying value of {asset} held by the system. It takes into account the vault contract balance, and the balance deployed across all the strategies."
        },
        "updateStrategyAllocBPS(address,uint256)": {
          "notice": "Updates the allocation points for a given strategy."
        },
        "updateTvlCap(uint256)": {
          "notice": "Updates the vault tvl cap (the max amount of assets held by the vault)."
        },
        "updateWithdrawMaxLoss(uint256)": {
          "notice": "Updates the withdrawMaxLoss which is the maximum allowed slippage."
        },
        "withdraw(uint256,address,address)": {
          "notice": "Burns shares from owner and sends exactly assets of underlying tokens to receiver."
        }
      },
      "notice": "Implementation of a vault to deposit funds for yield optimizing. This is the contract that receives funds and that users interface with. The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "src/ReaperVaultV2.sol": "ReaperVaultV2"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ]
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
      "keccak256": "0x07cf8d783adf28649b2ec21c55dd14941b5c779e87d19b6233fa1cb0debe2f71",
      "license": "MIT",
      "urls": [
        "bzz-raw://3752ae12fdcfa26302c48e93103a6951e545842f836c368860f5191d7eee2b46",
        "dweb:/ipfs/QmeJMaAv99yh5WJHcHnt24diZREjMab4wBptkETwxNfyaq"
      ]
    },
    "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
      "keccak256": "0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247",
      "license": "MIT",
      "urls": [
        "bzz-raw://7ee05f28f549a5d6515e152580716b87636ed4bfab9812499a6e3803df88288b",
        "dweb:/ipfs/QmeEnhdwY1t5Y3YU5a4ffzgXuToydH2PNdNxV9W7dEPRQJ"
      ]
    },
    "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
      "keccak256": "0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57",
      "license": "MIT",
      "urls": [
        "bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a",
        "dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh"
      ]
    },
    "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
      "keccak256": "0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676",
      "license": "MIT",
      "urls": [
        "bzz-raw://3dcc7b09bfa6e18aab262ca372f4a9b1fc82e294b430706a4e1378cf58e6a276",
        "dweb:/ipfs/QmT8oSAcesdctR15HMLhr2a1HRpXymxdjTfdtfTYJcj2N2"
      ]
    },
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "keccak256": "0x6e3ba605a09b2cf6ab80fa9e4159b1e9f0f49bd8927032c3251a099e96ed54bc",
      "license": "MIT",
      "urls": [
        "bzz-raw://05bb933ff14dd2a81c37c1d7b4992df8034107ca5edd60cf8e5a20dc566d3b72",
        "dweb:/ipfs/QmbDdZDWqkRdLtG6AFutDNzF9d2vyVFDJmVSbnVKQ6nPHH"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "keccak256": "0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d",
      "license": "MIT",
      "urls": [
        "bzz-raw://b394e20d57877a825c24c1841e219d6ab1e41decec060ea935422ac9b7a25f8a",
        "dweb:/ipfs/QmVTaGCMR4Gi9w1LUVVcjEJHrHF2qcr1avFkLtsLD6sEAr"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
      "license": "MIT",
      "urls": [
        "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
        "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
      "license": "MIT",
      "urls": [
        "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
        "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
      "license": "MIT",
      "urls": [
        "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
        "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
      ]
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "keccak256": "0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29",
      "license": "MIT",
      "urls": [
        "bzz-raw://11756f42121f6541a35a8339ea899ee7514cfaa2e6d740625fcc844419296aa6",
        "dweb:/ipfs/QmekMuk6BY4DAjzeXr4MSbKdgoqqsZnA8JPtuyWc6CwXHf"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0x9720545d8ea1f76222f98683f861f919e9c28bd5d5503caa7e3620a21b6aaa24",
      "license": "MIT",
      "urls": [
        "bzz-raw://fe3dac0e0258d8396c33fd27c277699a9bfac198f2cb45632c4f5df2c2ca895a",
        "dweb:/ipfs/QmfEWsX7aGpWN9wooHiQo1XjiGM1h6iXeaeMTAJ1TUcnts"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
      "license": "MIT",
      "urls": [
        "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
        "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "keccak256": "0x437d45e8d4f909240a91d3ef5d2bbe9c400a3c751627d0380a86beb29eacb578",
      "license": "MIT",
      "urls": [
        "bzz-raw://39c100b5b4fe45dce917d4c0d98a021996d97cc4978b98f141ac41161b84a272",
        "dweb:/ipfs/QmdqFW5JzHXCm9v1mAuK61aNSyzCfS3rPr1HThv7ZPtQko"
      ]
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "keccak256": "0x54e6a1e5e95d1b8baefbd83e29059d4411383a23eed43f8489df5d054dacc9d6",
      "license": "MIT",
      "urls": [
        "bzz-raw://1ce6f9747c440572f51a7c9fadbfb8bce3d77e62337d376e79a0a17f7c2caf68",
        "dweb:/ipfs/Qmdo5X511idJrSBUVurPAB4Hgj47UWNZMwfJms58YiKVKr"
      ]
    },
    "src/ReaperVaultV2.sol": {
      "keccak256": "0x9258e520197febeafed3bf364168048363f02bef6d147362fc2596c48c2097bd",
      "license": "MIT",
      "urls": [
        "bzz-raw://585a9d19c450ea4bfd6b653d6e83d03f3c300d15b91c4f409a9bee25bb586f70",
        "dweb:/ipfs/QmcJeGh3o2MG6BLVpVSJzYHv8y3SLAL9H95pjQcwoDByQ9"
      ]
    },
    "src/interfaces/IERC4626.sol": {
      "keccak256": "0xeff2f25a7f7efe8a9e6e6ead2311e97153055c339bcc2ddfcea1d16c12696d86",
      "license": "MIT",
      "urls": [
        "bzz-raw://16ecc4bd216a48c2f67ec2a8f4351e7ac5b24604f30ce3a432844d10527db9ae",
        "dweb:/ipfs/QmRRpfsa9KsnXan4wedMBX8cGK123mvhxyq2LnA4QRBF4T"
      ]
    },
    "src/interfaces/IStrategy.sol": {
      "keccak256": "0x1f02dbff2c0bcd046339c2a73bac2da413370b78932a2995b9ad7f98aebf94a1",
      "license": "MIT",
      "urls": [
        "bzz-raw://41410d6974b6a4bb56af2f97cf2627badac655508df4758b6efde46b853df7d6",
        "dweb:/ipfs/QmZaqmWFZzdbgj7gqTVJK1bDGri8gFm2mCnj69g9tVE1uo"
      ]
    },
    "src/library/FixedPointMathLib.sol": {
      "keccak256": "0x62c0c320c9e5da07780c3e4a46be978c483363460f8fa4796bfb87d3489e8313",
      "license": "AGPL-3.0-only",
      "urls": [
        "bzz-raw://3e59a986365e9627cefd29ebe38fe20a694390baace618c4fe8a7a41d7fc7abf",
        "dweb:/ipfs/QmaE1iLZwTEYpyTX9qJK5ruwCVPLttsSsSyPwmNaAdoNhu"
      ]
    }
  },
  "version": 1
}