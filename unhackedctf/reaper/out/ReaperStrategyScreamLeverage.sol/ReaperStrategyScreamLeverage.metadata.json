{
  "compiler": {
    "version": "0.8.11+commit.d7f03943"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "previousAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "beacon",
            "type": "address"
          }
        ],
        "name": "BeaconUpgraded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newCallFee",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newTreasuryFee",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newStrategistFee",
            "type": "uint256"
          }
        ],
        "name": "FeesUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint8",
            "name": "version",
            "type": "uint8"
          }
        ],
        "name": "Initialized",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "previousAdminRole",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "newAdminRole",
            "type": "bytes32"
          }
        ],
        "name": "RoleAdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleGranted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "harvester",
            "type": "address"
          }
        ],
        "name": "StratHarvest",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "newStrategistRemitter",
            "type": "address"
          }
        ],
        "name": "StrategistRemitterUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newFee",
            "type": "uint256"
          }
        ],
        "name": "TotalFeeUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "implementation",
            "type": "address"
          }
        ],
        "name": "Upgraded",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "ADMIN",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DAI",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DEFAULT_ADMIN_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "GUARDIAN",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "KEEPER",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "LTV_SAFETY_ZONE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MANTISSA",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MAX_FEE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ONE_YEAR",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "PERCENT_DIVISOR",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "SCREAM",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "STRATEGIST",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "STRATEGIST_MAX_FEE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "UNI_ROUTER",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "UPGRADE_TIMELOCK",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "WFTM",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "allowedLTVDrift",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "balanceOfPool",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "balanceOfWant",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "borrowDepth",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "cWant",
        "outputs": [
          {
            "internalType": "contract CErc20I",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "calculateLTV",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "ltv",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "callFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "clearUpgradeCooldown",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "comptroller",
        "outputs": [
          {
            "internalType": "contract IComptroller",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "emergencyExit",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getCurrentPosition",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "supplied",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "borrowed",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleAdmin",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          }
        ],
        "name": "getRoleMember",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleMemberCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "grantRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "harvest",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "callerFee",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "hasRole",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_vault",
            "type": "address"
          },
          {
            "internalType": "address[]",
            "name": "_feeRemitters",
            "type": "address[]"
          },
          {
            "internalType": "address[]",
            "name": "_strategists",
            "type": "address[]"
          },
          {
            "internalType": "address[]",
            "name": "_multisigRoles",
            "type": "address[]"
          },
          {
            "internalType": "address",
            "name": "_scWant",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "initiateUpgradeCooldown",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lastHarvestTimestamp",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "manualDeleverage",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "manualReleaseWant",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "markets",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "maxBorrowDepth",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "minScreamToSell",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "minWantToLeverage",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "proxiableUUID",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "renounceRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "revokeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "screamToWftmRoute",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_drift",
            "type": "uint256"
          }
        ],
        "name": "setAllowedLtvDrift",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "_borrowDepth",
            "type": "uint8"
          }
        ],
        "name": "setBorrowDepth",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "setEmergencyExit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_minScreamToSell",
            "type": "uint256"
          }
        ],
        "name": "setMinScreamToSell",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_minWantToLeverage",
            "type": "uint256"
          }
        ],
        "name": "setMinWantToLeverage",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_ltv",
            "type": "uint256"
          }
        ],
        "name": "setTargetLtv",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "_newWftmToWantRoute",
            "type": "address[]"
          }
        ],
        "name": "setWftmToWantRoute",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "strategistFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "strategistRemitter",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "targetLTV",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "treasury",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "treasuryFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "updateBalance",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_callFee",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_treasuryFee",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_strategistFee",
            "type": "uint256"
          }
        ],
        "name": "updateFees",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_newStrategistRemitter",
            "type": "address"
          }
        ],
        "name": "updateStrategistRemitter",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_totalFee",
            "type": "uint256"
          }
        ],
        "name": "updateTotalFee",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newTreasury",
            "type": "address"
          }
        ],
        "name": "updateTreasury",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "upgradeProposalTime",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          }
        ],
        "name": "upgradeTo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "upgradeToAndCall",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "vault",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "want",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "wftmToDaiRoute",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "wftmToWantRoute",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "withdraw",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "loss",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "This strategy will deposit and leverage a token on Scream to maximize yield by farming Scream tokens",
      "kind": "dev",
      "methods": {
        "balanceOf()": {
          "details": "Calculates the total amount of {want} held by the strategy which is the balance of want + the total amount supplied to Scream."
        },
        "balanceOfWant()": {
          "details": "Calculates the balance of want held directly by the strategy"
        },
        "calculateLTV()": {
          "details": "Calculates the LTV using existing exchange rate, depends on the cWant being updated to be accurate. Does not update in order provide a view function for LTV."
        },
        "clearUpgradeCooldown()": {
          "details": "This function is called:      - in initialize()      - as part of a successful upgrade      - manually to clear the upgrade cooldown. Guardian and roles with higher privilege can clear this cooldown."
        },
        "getCurrentPosition()": {
          "details": "Returns the current position in Scream. Does not accrue interest so might not be accurate, but the cWant is usually updated."
        },
        "getRoleAdmin(bytes32)": {
          "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "getRoleMember(bytes32,uint256)": {
          "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
        },
        "getRoleMemberCount(bytes32)": {
          "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
        },
        "grantRole(bytes32,address)": {
          "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
        },
        "harvest()": {
          "details": "harvest() function that takes care of logging. Subcontracts should      override _harvestCore() and implement their specific logic in it."
        },
        "hasRole(bytes32,address)": {
          "details": "Returns `true` if `account` has been granted `role`."
        },
        "initialize(address,address[],address[],address[],address)": {
          "details": "Initializes the strategy. Sets parameters, saves routes, and gives allowances."
        },
        "initiateUpgradeCooldown()": {
          "details": "This function must be called prior to upgrading the implementation.      It's required to wait UPGRADE_TIMELOCK seconds before executing the upgrade.      Strategists and roles with higher privilege can initiate this cooldown."
        },
        "manualDeleverage(uint256)": {
          "details": "Emergency function to deleverage in case regular deleveraging breaks"
        },
        "manualReleaseWant(uint256)": {
          "details": "Emergency function to deleverage in case regular deleveraging breaks"
        },
        "proxiableUUID()": {
          "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
        },
        "renounceRole(bytes32,address)": {
          "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
        },
        "revokeRole(bytes32,address)": {
          "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
        },
        "setAllowedLtvDrift(uint256)": {
          "details": "Sets a new allowed LTV drift Should be in units of 1e18"
        },
        "setBorrowDepth(uint8)": {
          "details": "Sets a new borrow depth (how many loops for leveraging+deleveraging)"
        },
        "setEmergencyExit()": {
          "details": "See `vault.setEmergencyShutdown()` and `harvest()` for further details."
        },
        "setMinScreamToSell(uint256)": {
          "details": "Sets the minimum reward the will be sold (too little causes revert from Uniswap)"
        },
        "setMinWantToLeverage(uint256)": {
          "details": "Sets the minimum want to leverage/deleverage (loop) for"
        },
        "setTargetLtv(uint256)": {
          "details": "Sets a new LTV for leveraging. Should be in units of 1e18"
        },
        "setWftmToWantRoute(address[])": {
          "details": "Sets the swap path to go from {WFTM} to {want}."
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        },
        "updateBalance()": {
          "details": "Updates the balance. This is the state changing version so it sets balanceOfPool to the latest value."
        },
        "updateFees(uint256,uint256,uint256)": {
          "details": "updates the call fee, treasury fee, and strategist fee      call Fee + treasury Fee must add up to PERCENT_DIVISOR      strategist fee is expressed as % of the treasury fee and      must be no more than STRATEGIST_MAX_FEE      only DEFAULT_ADMIN_ROLE."
        },
        "updateStrategistRemitter(address)": {
          "details": "Updates the current strategistRemitter. Only DEFAULT_ADMIN_ROLE may do this."
        },
        "updateTotalFee(uint256)": {
          "details": "updates the total fee, capped at 5%; only DEFAULT_ADMIN_ROLE."
        },
        "updateTreasury(address)": {
          "details": "only DEFAULT_ADMIN_ROLE can update treasury address."
        },
        "upgradeTo(address)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        },
        "upgradeToAndCall(address,bytes)": {
          "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
        },
        "withdraw(uint256)": {
          "details": "Withdraws funds and sends them back to the vault. Can only      be called by the vault. _amount must be valid and security fee      is deducted up-front."
        }
      },
      "stateVariables": {
        "UNI_ROUTER": {
          "details": "Third Party Contracts: {UNI_ROUTER} - the UNI_ROUTER for target DEX {comptroller} - Scream contract to enter market and to claim Scream tokens"
        },
        "WFTM": {
          "details": "Tokens Used: {WFTM} - Required for liquidity routing when doing swaps. Also used to charge fees on yield. {SCREAM} - The reward token for farming {DAI} - For charging fees {cWant} - The Scream version of the want token"
        },
        "markets": {
          "details": "Scream variables {markets} - Contains the Scream tokens to farm, used to enter markets and claim Scream {MANTISSA} - The unit used by the Compound protocol {LTV_SAFETY_ZONE} - We will only go up to 98% of max allowed LTV for {targetLTV}"
        },
        "screamToWftmRoute": {
          "details": "Routes we take to swap tokens {screamToWftmRoute} - Route we take to get from {SCREAM} into {WFTM}. {wftmToWantRoute} - Route we take to get from {WFTM} into {want}. {wftmToDaiRoute} - Route we take to get from {WFTM} into {DAI}."
        },
        "targetLTV": {
          "details": "Strategy variables {targetLTV} - The target loan to value for the strategy where 1 ether = 100% {allowedLTVDrift} - How much the strategy can deviate from the target ltv where 0.01 ether = 1% {balanceOfPool} - The total balance deposited into Scream (supplied - borrowed) {borrowDepth} - The maximum amount of loops used to leverage and deleverage {minWantToLeverage} - The minimum amount of want to leverage in a loop"
        }
      },
      "version": 1
    },
    "userdoc": {
      "events": {
        "TotalFeeUpdated(uint256)": {
          "notice": "{TotalFeeUpdated} Event that is fired each time the total fee is updated. {FeesUpdated} Event that is fired each time callFee+treasuryFee+strategistFee are updated. {StratHarvest} Event that is fired each time the strategy gets harvested. {StrategistRemitterUpdated} Event that is fired each time the strategistRemitter address is updated."
        }
      },
      "kind": "user",
      "methods": {
        "KEEPER()": {
          "notice": "Reaper Roles in increasing order of privilege. {KEEPER} - Stricly permissioned trustless access for off-chain programs or third party keepers. {STRATEGIST} - Role conferred to authors of the strategy, allows for tweaking non-critical params. {GUARDIAN} - Multisig requiring 2 signatures for emergency measures such as pausing and panicking. {ADMIN}- Multisig requiring 3 signatures for unpausing. The DEFAULT_ADMIN_ROLE (in-built access control role) will be granted to a multisig requiring 4 signatures. This role would have upgrading capability, as well as the ability to grant any other roles. Also note that roles are cascading. So any higher privileged role should be able to perform all the functions of any lower privileged role."
        },
        "MAX_FEE()": {
          "notice": "Fee related constants: {MAX_FEE} - Maximum fee allowed by the strategy. Hard-capped at 10%. {STRATEGIST_MAX_FEE} - Maximum strategist fee allowed by the strategy (as % of treasury fee).                        Hard-capped at 50%"
        },
        "initialize(address,address[],address[],address[],address)": {
          "notice": "see documentation for each variable above its respective declaration."
        },
        "setEmergencyExit()": {
          "notice": "Activates emergency exit. Once activated, the Strategy will exit its  position upon the next harvest, depositing all funds into the Vault as  quickly as is reasonable given on-chain conditions.  This may only be called by governance or the strategist."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "src/ReaperStrategyScreamLeverage.sol": "ReaperStrategyScreamLeverage"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ]
  },
  "sources": {
    "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlEnumerableUpgradeable.sol": {
      "keccak256": "0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c",
      "license": "MIT",
      "urls": [
        "bzz-raw://f79816b0fdc0a6f53173238932ef86e2d7089a6e87b6c5c9c27e6d60f3fe809a",
        "dweb:/ipfs/QmTtXQ8sw91q4n4nXZigNWH3YaGqsJjPXyWCgPGDC6s24j"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol": {
      "keccak256": "0x42261ad9d6311ea9da15239f020761c5666274e984f1bc2559d7e91971b80ff0",
      "license": "MIT",
      "urls": [
        "bzz-raw://6fece750c4f8854dbb00202048ab269a6a9b239b37153388b1f918f66ace4681",
        "dweb:/ipfs/QmYBMoGKKDWxNDDsbutVanJuNmpbT7j157dd66trc9CoMM"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlEnumerableUpgradeable.sol": {
      "keccak256": "0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572",
      "license": "MIT",
      "urls": [
        "bzz-raw://ea07bdbf13b16d19ccf8a8f1a361c80bbfb6073e8b1d079b72f7a5f09dc642cd",
        "dweb:/ipfs/QmQh5YhCySYR5RSAEFTt3NaDhq6MCxvSTdFh56874JPxbY"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol": {
      "keccak256": "0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa",
      "license": "MIT",
      "urls": [
        "bzz-raw://740cf4dc535e3082560cf5a031473029f322690fc8037fe9d5e3a8bef42e757c",
        "dweb:/ipfs/QmTQxFdfxcaueQa23VX34wAPqzruZbkzyeN58tZK2yav2b"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol": {
      "keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
      "license": "MIT",
      "urls": [
        "bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053",
        "dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "keccak256": "0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823",
      "license": "MIT",
      "urls": [
        "bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2",
        "dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol": {
      "keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
      "license": "MIT",
      "urls": [
        "bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1",
        "dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
      "license": "MIT",
      "urls": [
        "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
        "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "keccak256": "0xcf6837f68b5376c07f7b5130dc8de39f00f357f119113a82a15229bf2b96fdc5",
      "license": "MIT",
      "urls": [
        "bzz-raw://6be1e3e05f79a714c08a446a994dba2939203092d7aa97302d7b2ab157b437fb",
        "dweb:/ipfs/QmdgBbHNijVgApRQ9UM17qds6QdhTgXxKHUoLAswA6VNyH"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
      "keccak256": "0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff",
      "license": "MIT",
      "urls": [
        "bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2",
        "dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "keccak256": "0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024",
      "license": "MIT",
      "urls": [
        "bzz-raw://17a4063bc918df0f7bb9cbf04c6f0bb4977afab3f2fc212bc138a178312a221d",
        "dweb:/ipfs/QmZMdvsHP5mDEAAdrK4bNeNh47TfmSFgN9qEBFTbie7zmm"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "keccak256": "0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df",
      "license": "MIT",
      "urls": [
        "bzz-raw://e814c30d43cef5501933b775f33a6d6f06cde8aa3b7ce3773cf2256169bb6a1b",
        "dweb:/ipfs/QmWMqHGc8MHDRgrPrtVyPqsYizr8dJsyFhnmwQV6aQwPKn"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "keccak256": "0xf8313972e73a49ff9a8c2dee0b9a07a3585bc4d077bd8a9670ebdd76ff390177",
      "license": "MIT",
      "urls": [
        "bzz-raw://3fc2a0888fca21e976b4b77ca46891f547ff339a8175bc0a6461a62ce65aa89a",
        "dweb:/ipfs/QmYDpaGK98esv36MBanhjgzpS7QcisrsVMzttPknvxWhRG"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
      "license": "MIT",
      "urls": [
        "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
        "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol": {
      "keccak256": "0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a",
      "license": "MIT",
      "urls": [
        "bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3",
        "dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
      "keccak256": "0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863",
      "license": "MIT",
      "urls": [
        "bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c",
        "dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
      "keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
      "license": "MIT",
      "urls": [
        "bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
        "dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
      "keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
      "license": "MIT",
      "urls": [
        "bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
        "dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol": {
      "keccak256": "0xfdac7f9bd81ce2779cc98500c3d41f92a9b5f1e4092cd4922d0f414e846ce2fa",
      "license": "MIT",
      "urls": [
        "bzz-raw://1f687ea03746fd56cd331da29e5c7ae3894f866c174c2a8da82850cb1e5a8663",
        "dweb:/ipfs/QmTU3RYCjiWAMmndwWiw8DCmkX4ampdDo1HECwGU2j6P3i"
      ]
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/EnumerableSetUpgradeable.sol": {
      "keccak256": "0x8defa7c9cc7cc4eb529daff535eff833f76a4cb424f85a08524eeea15e071a55",
      "license": "MIT",
      "urls": [
        "bzz-raw://e92f4e7c88616c7cf2aa219f57479b26675746b2607a77977d7726078874aa0e",
        "dweb:/ipfs/QmWGzKc4EdH2k1H7bknvxvJ7aA7zvfFBSExzqGFMWNiRVj"
      ]
    },
    "src/ReaperStrategyScreamLeverage.sol": {
      "keccak256": "0x78a036f0bede8e43804565ca09fbe2c842e471d17a28bc4173e3999ec3da84ba",
      "license": "MIT",
      "urls": [
        "bzz-raw://1fe03c31edc5606ee56a4d7f1bb1b26051f30e9ae3a360dcb9ca54778af0d516",
        "dweb:/ipfs/QmNZzU63QZ7jyLqAgqJyMs3hLJ27L1tMDUyDG7FaxVrbMe"
      ]
    },
    "src/abstract/ReaperBaseStrategyv4.sol": {
      "keccak256": "0xf179b9b4e93b8e6c1c1e2a233d64dadb1bb736a7b14e0ca03b7d9c620bd7bd64",
      "license": "MIT",
      "urls": [
        "bzz-raw://1a89e722670b5d073d92ec77cae29ac7e6c180bd129a6cdebaf03c23ceaaa081",
        "dweb:/ipfs/QmP16NJt1i1zUJcKQPBBGnPBQ5kXMLADcrNfPoxLbwywZX"
      ]
    },
    "src/interfaces/CErc20I.sol": {
      "keccak256": "0x72b1d3bbb068ba46e678f32dca07136b309a999c10a3a0ea30d1c09d595f22f8",
      "license": "MIT",
      "urls": [
        "bzz-raw://6aabd6bffa0ddecbdcc0deafae96b0c1409445241395484507fe447db566773a",
        "dweb:/ipfs/QmZkud8xAGnZgYsfjf5dbapezN5N4KasqcnTRiHb67XhBr"
      ]
    },
    "src/interfaces/CTokenI.sol": {
      "keccak256": "0x09b617eaa7d66e29e1009989a1fa2883065538418c0ca3aecb6cc6c7fc2934a6",
      "license": "MIT",
      "urls": [
        "bzz-raw://b6396d379e45190856ea34913f607284d10f558da28dbeb8bbe46a6df09f50ae",
        "dweb:/ipfs/QmVsGd23Wdo7kWP4VN6i45swkDoQJNtZMaP567b18QKMsP"
      ]
    },
    "src/interfaces/IComptroller.sol": {
      "keccak256": "0x8e3d3579c5fea27c7f7e5a1f55faed144121cea24bdd6228aab8be3d342e488f",
      "license": "MIT",
      "urls": [
        "bzz-raw://618368e27aeabd97058bccfc609fb5183b72c1a37e5e29ab9af3fe95a40a92da",
        "dweb:/ipfs/QmZGR1Vx6YWY3JqN4QFDNhrCEpda5LPkkZ9nSAm2i3NxLL"
      ]
    },
    "src/interfaces/IStrategy.sol": {
      "keccak256": "0x1f02dbff2c0bcd046339c2a73bac2da413370b78932a2995b9ad7f98aebf94a1",
      "license": "MIT",
      "urls": [
        "bzz-raw://41410d6974b6a4bb56af2f97cf2627badac655508df4758b6efde46b853df7d6",
        "dweb:/ipfs/QmZaqmWFZzdbgj7gqTVJK1bDGri8gFm2mCnj69g9tVE1uo"
      ]
    },
    "src/interfaces/IUniswapV2Router01.sol": {
      "keccak256": "0xed168b7c37a0dde1bfb36e8947d20de28c437c4917b89ef151ddf5397b19cb58",
      "license": "MIT",
      "urls": [
        "bzz-raw://6d001a889d0c0c9ec2c6f752c5437921ff666aeebbd0bdc3c170352ed693da12",
        "dweb:/ipfs/QmUbA5und7EnVQ4JygEqmKB4C1cGVnMQtEwC7bZ9UFGaet"
      ]
    },
    "src/interfaces/IUniswapV2Router02.sol": {
      "keccak256": "0x483a390d4ed1f76a40d6eaea1c784c1a3b9f69ea3cafcb69069a9f4f3fad12c2",
      "license": "MIT",
      "urls": [
        "bzz-raw://1f8e0f2a6be29219bb083fa6404e3af54c6d98ad87a211cccfb447a94361e5bc",
        "dweb:/ipfs/QmYLpNkhcufRRiANZ4Ma6M8Ahcmn1gRdTMBjdNtR59NLrw"
      ]
    },
    "src/interfaces/IVault.sol": {
      "keccak256": "0xe8d6e08832ca0227615c7ae359f7c23df84c9baa223c716921209f413cbf1493",
      "license": "MIT",
      "urls": [
        "bzz-raw://a486bac7d9a7b9b100ae97857e0ba06d4bcee3a2853143c9c82984d7a9508b40",
        "dweb:/ipfs/QmfQXgci2S8Jx38Qh72fpLLASX2TfNg32vjbv4G5TtpmEH"
      ]
    },
    "src/interfaces/InterestRateModel.sol": {
      "keccak256": "0xc751fdf6e558d6d8a52b345d756fd44c864a7b7bdb320df4d569f2721fedea51",
      "license": "MIT",
      "urls": [
        "bzz-raw://6f3333550032ff54210ab632039bb0e5f388ecfb99f0ec3a3f54d55c6af95a7d",
        "dweb:/ipfs/QmdYRZXFiztvzCProiv7eB5fCDJBS6PmV3UQ7ns3WRShE6"
      ]
    }
  },
  "version": 1
}